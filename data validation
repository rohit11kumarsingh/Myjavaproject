Objective: Strengthen input validation to ensure data 
integrity (e.g., ID format, non-empty fields). 
We'll update the Library class to enforce stricter validation 
rules, such as ensuring IDs follow a specific format (e.g., 
"B" followed by digits). 
import java.util.ArrayList; 
import java.util.List; 
public class Library { 
private List<Book> books; 
public Library() { 
books = new ArrayList<>(); 
} 
public void addBook(String title, String author, String id) { 
if (!isValidInput(title, author, id)) { 
return; 
} 
if (!isValidIdFormat(id)) { 
System.out.println("Error: ID must start with 'B' 
followed by digits (e.g., B001)."); 
return; 
} 
if (searchBookById(id) != null) { 
System.out.println("Error: Book with ID " + id + " 
already exists."); 
return; 
} 
Book book = new Book(title, author, id); 
books.add(book); 
System.out.println("Book added: " + book); 
} 
public void displayBooks() { 
if (books.isEmpty()) { 
System.out.println("No books in the library."); 
} else { 
System.out.println("Library Books:"); 
for (Book book : books) { 
System.out.println(book); 
} 
} 
} 
public Book searchBookByTitle(String title) { 
if (title == null || title.trim().isEmpty()) { 
System.out.println("Error: Search title cannot be 
empty."); 
return null; 
} 
for (Book book : books) { 
if (book.getTitle().equalsIgnoreCase(title)) { 
return book; 
} 
} 
System.out.println("Book with title '" + title + "' not 
found."); 
return null; 
} 
public Book searchBookById(String id) { 
if (id == null || id.trim().isEmpty()) { 
System.out.println("Error: Search ID cannot be 
empty."); 
return null; 
} 
if (!isValidIdFormat(id)) { 
System.out.println("Error: Invalid ID format."); 
return null; 
} 
for (Book book : books) { 
if (book.getId().equals(id)) { 
return book; 
} 
} 
System.out.println("Book with ID " + id + " not 
found."); 
return null; 
} 
public void deleteBook(String id) { 
if (id == null || id.trim().isEmpty()) { 
System.out.println("Error: ID cannot be empty."); 
return; 
} 
if (!isValidIdFormat(id)) { 
System.out.println("Error: Invalid ID format."); 
return; 
} 
Book book = searchBookById(id); 
if (book != null) { 
books.remove(book); 
System.out.println("Book deleted: " + book); 
} 
} 
private boolean isValidInput(String title, String author, 
String id) { 
if (title == null || title.trim().isEmpty()) { 
System.out.println("Error: Title cannot be empty."); 
return false; 
} 
if (author == null || author.trim().isEmpty()) { 
System.out.println("Error: Author cannot be 
empty."); 
return false; 
} 
if (id == null || id.trim().isEmpty()) { 
System.out.println("Error: ID cannot be empty."); 
return false; 
} 
return true; 
} 
private boolean isValidIdFormat(String id) { 
return id.matches("^B\\d+$"); 
} 
}
